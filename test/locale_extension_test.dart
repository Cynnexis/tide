import 'package:flutter/material.dart';
import 'package:test/test.dart';
import 'package:tide/utility/extension/locale_parser.dart';

//region DATA

/// The list of locales, formatted as [String]s, to test.
///
/// Source: https://avajava.com/tutorials/lessons/how-do-i-display-all-available-locales.html
const List<String> locales = <String>[
  'ar',
  'ar_AE',
  'ar_BH',
  'ar_DZ',
  'ar_EG',
  'ar_IQ',
  'ar_JO',
  'ar_KW',
  'ar_LB',
  'ar_LY',
  'ar_MA',
  'ar_OM',
  'ar_QA',
  'ar_SA',
  'ar_SD',
  'ar_SY',
  'ar_TN',
  'ar_YE',
  'be',
  'be_BY',
  'bg',
  'bg_BG',
  'ca',
  'ca_ES',
  'cs',
  'cs_CZ',
  'da',
  'da_DK',
  'de',
  'de_AT',
  'de_CH',
  'de_DE',
  'de_LU',
  'el',
  'el_GR',
  'en',
  'en_AU',
  'en_CA',
  'en_GB',
  'en_IE',
  'en_IN',
  'en_NZ',
  'en_US',
  'en_ZA',
  'es',
  'es_AR',
  'es_BO',
  'es_CL',
  'es_CO',
  'es_CR',
  'es_DO',
  'es_EC',
  'es_ES',
  'es_GT',
  'es_HN',
  'es_MX',
  'es_NI',
  'es_PA',
  'es_PE',
  'es_PR',
  'es_PY',
  'es_SV',
  'es_UY',
  'es_VE',
  'et',
  'et_EE',
  'fi',
  'fi_FI',
  'fr',
  'fr_BE',
  'fr_CA',
  'fr_CH',
  'fr_FR',
  'fr_LU',
  'hi_IN',
  'hr',
  'hr_HR',
  'hu',
  'hu_HU',
  'is',
  'is_IS',
  'it',
  'it_CH',
  'it_IT',
  'ja',
  'ja_JP',
  'ko',
  'ko_KR',
  'lt',
  'lt_LT',
  'lv',
  'lv_LV',
  'mk',
  'mk_MK',
  'nl',
  'nl_BE',
  'nl_NL',
  'no',
  'no_NO',
  'pl',
  'pl_PL',
  'pt',
  'pt_BR',
  'pt_PT',
  'ro',
  'ro_RO',
  'ru',
  'ru_RU',
  'sk',
  'sk_SK',
  'sl',
  'sl_SI',
  'sq',
  'sq_AL',
  'sr',
  'sr_BA',
  'sr_CS',
  'sv',
  'sv_SE',
  'th',
  'th_TH',
  'tr',
  'tr_TR',
  'uk',
  'uk_UA',
  'vi',
  'vi_VN',
  'zh',
  'zh_CN',
  'zh_HK',
  'zh_TW',
];

/// The list of countries, using ISO 3166-1 alpha-2 codes.
///
/// Source: https://avajava.com/tutorials/lessons/how-do-i-display-all-available-locales.html
const List<String> countries = <String>[
  '',
  'AE',
  'BH',
  'DZ',
  'EG',
  'IQ',
  'JO',
  'KW',
  'LB',
  'LY',
  'MA',
  'OM',
  'QA',
  'SA',
  'SD',
  'SY',
  'TN',
  'YE',
  '',
  'BY',
  '',
  'BG',
  '',
  'ES',
  '',
  'CZ',
  '',
  'DK',
  '',
  'AT',
  'CH',
  'DE',
  'LU',
  '',
  'GR',
  '',
  'AU',
  'CA',
  'GB',
  'IE',
  'IN',
  'NZ',
  'US',
  'ZA',
  '',
  'AR',
  'BO',
  'CL',
  'CO',
  'CR',
  'DO',
  'EC',
  'ES',
  'GT',
  'HN',
  'MX',
  'NI',
  'PA',
  'PE',
  'PR',
  'PY',
  'SV',
  'UY',
  'VE',
  '',
  'EE',
  '',
  'FI',
  '',
  'BE',
  'CA',
  'CH',
  'FR',
  'LU',
  'IN',
  '',
  'HR',
  '',
  'HU',
  '',
  'IS',
  '',
  'CH',
  'IT',
  '',
  'JP',
  '',
  'KR',
  '',
  'LT',
  '',
  'LV',
  '',
  'MK',
  '',
  'BE',
  'NL',
  '',
  'NO',
  '',
  'PL',
  '',
  'BR',
  'PT',
  '',
  'RO',
  '',
  'RU',
  '',
  'SK',
  '',
  'SI',
  '',
  'AL',
  '',
  'BA',
  'CS',
  '',
  'SE',
  '',
  'TH',
  '',
  'TR',
  '',
  'UA',
  '',
  'VN',
  '',
  'CN',
  'HK',
  'TW',
];

/// The list of languages, using ISO 639-1 codes.
///
/// Source: https://avajava.com/tutorials/lessons/how-do-i-display-all-available-locales.html
const List<String> languages = <String>[
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'ar',
  'be',
  'be',
  'bg',
  'bg',
  'ca',
  'ca',
  'cs',
  'cs',
  'da',
  'da',
  'de',
  'de',
  'de',
  'de',
  'de',
  'el',
  'el',
  'en',
  'en',
  'en',
  'en',
  'en',
  'en',
  'en',
  'en',
  'en',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'es',
  'et',
  'et',
  'fi',
  'fi',
  'fr',
  'fr',
  'fr',
  'fr',
  'fr',
  'fr',
  'hi',
  'hr',
  'hr',
  'hu',
  'hu',
  'is',
  'is',
  'it',
  'it',
  'it',
  'ja',
  'ja',
  'ko',
  'ko',
  'lt',
  'lt',
  'lv',
  'lv',
  'mk',
  'mk',
  'nl',
  'nl',
  'nl',
  'no',
  'no',
  'pl',
  'pl',
  'pt',
  'pt',
  'pt',
  'ro',
  'ro',
  'ru',
  'ru',
  'sk',
  'sk',
  'sl',
  'sl',
  'sq',
  'sq',
  'sr',
  'sr',
  'sr',
  'sv',
  'sv',
  'th',
  'th',
  'tr',
  'tr',
  'uk',
  'uk',
  'vi',
  'vi',
  'zh',
  'zh',
  'zh',
  'zh',
];

//endregion

void main() {
  test('Parse empty locale', () {
    try {
      Locale('').parse();
      fail('Empty locale should be invalid');
    } catch (err) {
      // ignore everything but TestFailure only
      if (err is TestFailure) {
        rethrow;
      }
    }
  });

  test('Parse all locales', () {
    List<Locale> testLocales = getTestLocales();
    assert(testLocales.isNotEmpty, 'The test locales list is empty.');

    for (int i = 0; i < locales.length; ++i) {
      expect(
        Locale(locales[i]).parse(),
        equals(testLocales[i]),
        reason: 'Index: $i',
      );
    }
  });
}

/// Get the data for testing
List<Locale> getTestLocales() {
  final List<Locale> testLocales = <Locale>[];
  assert(
      locales.length == countries.length &&
          countries.length == languages.length,
      'Expected all 4 lists to have the same length, got:\n'
      'locales: ${locales.length}\n'
      'countries: ${countries.length}\n'
      'languages: ${languages.length}');

  for (int i = 0; i < locales.length; ++i) {
    if (countries[i].isNotEmpty) {
      testLocales.add(Locale(languages[i], countries[i]));
    } else {
      testLocales.add(Locale(languages[i]));
    }

    assert(testLocales.last.toString() == locales[i],
        'Expected the constructed locale to be equal to its equivalent string representation, got:\nConstructed locale: ${locales.last}\nString repr: ${locales[i]}\nIndex: $i');
  }

  return testLocales;
}
