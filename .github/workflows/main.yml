name: Tide CI/CD

on:
  pull_request:
    branches:
      - main
      - 'cicd/**'
  push:
    branches:
      - main
      - 'cicd/**'

jobs:
  tests:
    runs-on: ubuntu-20.04
    name: Analyze & tests
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-java@v3.1.0
        with:
          distribution: 'zulu'
          java-version: '11'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '2.10.4'
      - name: Configure application
        uses: ./.github/actions/tide-configuration-file/
        with:
          args: "--maintainer-email=${{ secrets.MAINTAINER_EMAIL }}"
      - name: Install dependencies
        run: flutter pub get
      - name: Analyze code
        run: flutter analyze --congratulate --no-pub --preamble --fatal-infos --fatal-warnings
      - name: Check dart code format
        run: flutter format --output=none --set-exit-if-changed .
      - name: Run tests
        run: flutter test --no-pub --coverage --concurrency=1 --reporter expanded
      - name: Code coverage report
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          delete-old-comments: ${{ github.event_name == 'pull_request' }}
          title: Tide

  build-android:
    runs-on: ubuntu-20.04
    name: Build Android Binaries
    needs: [tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-java@v3.1.0
        with:
          distribution: 'zulu'
          java-version: '11'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '2.10.4'
      - name: Configure application
        uses: ./.github/actions/tide-configuration-file/
        with:
          args: "--maintainer-email=${{ secrets.MAINTAINER_EMAIL }}"
      - name: Install dependencies
        run: flutter pub get
      - name: Write keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
        run: |
          printf "%s" "$KEYSTORE_BASE64" | base64 --decode --ignore-garbage - > android/keystore.jks
          printf "storePassword=%s\nkeyPassword=%s\nkeyAlias=%s\nstoreFile=%s/android/keystore.jks" "$KEYSTORE_PASSWORD" "$KEYSTORE_KEY_PASSWORD" "$KEYSTORE_KEY_ALIAS" "$(pwd)" > android/key.properties
      - name: Build binaries
        run: |
          flutter build appbundle
          flutter build apk --split-per-abi
          rm -rf bin/
          mkdir bin/
          mv build/app/outputs/bundle/release/app*.aab build/app/outputs/flutter-apk/app*.apk bin/
      - name: Remove sensible files
        run: rm -f android/keystore.jks android/key.properties
      - name: Upload appbundle
        uses: actions/upload-artifact@v2
        with:
          name: Appbundle
          path: bin/app-release.aab
          if-no-files-found: error
      - name: Upload APK (generic)
        uses: actions/upload-artifact@v2
        with:
          name: APK (generic)
          path: bin/app.apk
          if-no-files-found: error
      - name: Upload APK (arm64)
        uses: actions/upload-artifact@v2
        with:
          name: APK (arm64)
          path: bin/app-arm64-v8a-release.apk
          if-no-files-found: error
      - name: Upload APK (armeabi)
        uses: actions/upload-artifact@v2
        with:
          name: APK (armeabi)
          path: bin/app-armeabi-v7a-release.apk
          if-no-files-found: error
      - name: Upload APK (x86_64)
        uses: actions/upload-artifact@v2
        with:
          name: APK (x86_64)
          path: bin/app-x86_64-release.apk
          if-no-files-found: error

  build-ios:
    runs-on: macos-11
    name: Build iOS Binaries
    needs: [tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '2.10.4'
      - name: Configure application
        run: |
          echo -e "webapp:\n  uri:\n    scheme: https\n    host: \"cynnexis.github.io\"\n    port: 443\n    path: \"/tide/\"\nmaintainer_email: \"${{ secrets.MAINTAINER_EMAIL }}\"" > tide.yaml
      - name: Install dependencies
        run: flutter pub get
      - name: Build binary
        run: flutter build ios --release --no-codesign
      - name: Verbose
        run: |
          # Move the build structure into a new folder named after the project
          mkdir Tide/
          mv -f build/ios/iphoneos/Runner.app ./Tide

          # Create a zip archive
          zip -9 -r tide-ios.zip Tide

          # Rename the zip archive extension "ipa"
          # Solution from https://stackoverflow.com/a/68075166 (consulted on April 16th, 2022)
          mv tide-ios.zip tide-ios.ipa
          chmod a+x tide-ios.ipa
      - name: Upload iOS binary (ipa)
        uses: actions/upload-artifact@v2
        with:
          name: iOS (ipa)
          path: tide-ios.ipa
          if-no-files-found: error

  build-windows:
    runs-on: windows-2022
    name: Build Windows Installers
    needs: [tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '2.10.4'
      - name: Configure application
        run: |
          echo webapp: > tide.yaml
          echo   uri: >> tide.yaml
          echo     scheme: "https" >> tide.yaml
          echo     host: "cynnexis.github.io" >> tide.yaml
          echo     port: 443 >> tide.yaml
          echo     path: "/tide/" >> tide.yaml
          echo maintainer_email: "${{ secrets.MAINTAINER_EMAIL }}" >> tide.yaml
      - name: Install dependencies
        run: flutter pub get
      # Build the project
      - name: Build EXE
        run: flutter build windows
      # Build and upload x64
      - name: Build MSIX (x64)
        run: flutter pub run msix:create --build-windows false --architecture x64 --output-name tide-windows_x64
      - name: Upload MSIX (x64)
        uses: actions/upload-artifact@v2
        with:
          name: MSI (x64)
          path: build/tide-windows_x64.msix
          if-no-files-found: error
      # Build and upload x86
      - name: Build MSIX (x86)
        run: flutter pub run msix:create --build-windows false --architecture x86 --output-name tide-windows_x86
      - name: Upload MSIX (x86)
        uses: actions/upload-artifact@v2
        with:
          name: MSI (x86)
          path: build/tide-windows_x86.msix
          if-no-files-found: error

  build-web:
    runs-on: ubuntu-20.04
    name: Build Webapp
    needs: [tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '2.10.4'
      - name: Configure workspace
        run: find . -type f \( -name Makefile -o -iname '*.bash' -o -iname '*.sh' \) -exec chmod +x "{}" \;
      - name: Configure application
        uses: ./.github/actions/tide-configuration-file/
        with:
          args: "--maintainer-email=${{ secrets.MAINTAINER_EMAIL }}"
      - name: Install dependencies
        run: flutter pub get
      - name: Export documentation
        run: |
          flutter pub global activate dartdoc
          flutter pub global run dartdoc .
      - name: Search for documentation files
        run: |
          # Install requirements
          sudo apt-get update
          sudo apt-get install -qqy jq
          sudo apt-get clean

          # Save all documentation files in the JSON array $json_doc_files
          json_doc_files="["

          # Search for all files
          while IFS= read -r -d '' file; do
            json_doc_files="${json_doc_files}\"$file\", "
          done < <(find doc -type f \( -iname '*.html' -o -iname '*.htm' -o -iname '*.html5' -o -iname '*.css' -o -iname '*.php' -o -iname '*.js' \) -print0)

          # Close json
          json_doc_files=$(sed -Ee 's/,\s*$/\]/' <<< "$json_doc_files")

          # Assert is json
          if ! jq -e . &> /dev/null <<< "$json_doc_files"; then
            echo -e "An error occurred when constructing the JSON array for all documentation file:\n$json_doc_files" 1>&2
            exit 1
          fi

          # Add as GitHub env var
          echo "json_doc_files=$json_doc_files" >> $GITHUB_ENV
      - name: Expand emoji in documentation
        uses: Cynnexis/expand-emoji@v1
        with:
          files: "${{ env.json_doc_files }}"
      - name: Build the web app
        run: flutter build web --release --base-href "/${{ github.event.repository.name }}/"
      - name: Organize built files
        run: |
          mv -fT doc/api build/web/docs
          cp -ar assets build/web/docs/assets

          # Create a zip archive for artifact, deploy and release
          cd build/web
          find . -maxdepth 1 | tail -n+2 | xargs zip -9 -r tide-web.zip
          cd ../..
      - name: Upload web archive
        uses: actions/upload-artifact@v2
        with:
          name: Tide (web archive)
          path: build/web/tide-web.zip
          if-no-files-found: error

  deploy-web:
    runs-on: ubuntu-20.04
    name: Deploy the Web app on GitHub Pages
    needs: [build-web]
    if: github.event_name == 'push' && contains(github.ref, 'main') || contains(github.ref, 'cicd/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download action artifacts
        id: download_artifacts
        uses: actions/download-artifact@v2.0.10
        with:
          name: Tide (web archive)
          path: /tmp/artifacts
      - name: Unzip
        run: |
          # Unzip the archive
          mkdir -p /tmp/web
          unzip -d /tmp/web /tmp/artifacts/tide-web.zip
      - name: Deploy GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4.2.5
        with:
          branch: gh-pages
          folder: /tmp/web
          single-commit: true

  release:
    runs-on: ubuntu-20.04
    name: Create a release
    needs: [tests, build-android, build-ios, build-web, build-windows, deploy-web]
    if: github.event_name == 'push' && contains(github.ref, 'main') || contains(github.ref, 'cicd/')
    steps:
      - name: Prepare workspace
        run: mkdir -p /tmp/artifacts
      - name: Download action artifacts
        id: download_artifacts
        uses: actions/download-artifact@v2.0.10
        with:
          path: /tmp/artifacts
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get SDK Version from config
        id: lookup_app_version
        uses: mikefarah/yq@v4.23.1
        with:
          cmd: yq eval '.version' pubspec.yaml
      - name: Get current app version
        id: get_current_app_version
        run: echo "tide_version=${{ steps.lookup_app_version.outputs.result }}" >> $GITHUB_ENV
      - name: Create a release for Tide
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.tide_version }}
          release_name: v${{ env.tide_version }}
          body: "Ref: ${{ github.ref }} SHA: ${{ github.sha }}"
          draft: true
          prerelease: false
      - name: Upload appbundle
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "/tmp/artifacts/Appbundle/app-release.aab"
          asset_name: tide-release.aab
          asset_content_type: application/octet-stream
      - name: Upload APK (generic)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "/tmp/artifacts/APK (generic)/app.apk"
          asset_name: tide.apk
          asset_content_type: application/octet-stream
      - name: Upload APK (arm64)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "/tmp/artifacts/APK (arm64)/app-arm64-v8a-release.apk"
          asset_name: tide-arm64-v8a-release.apk
          asset_content_type: application/octet-stream
      - name: Upload APK (armeabi)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "/tmp/artifacts/APK (armeabi)/app-armeabi-v7a-release.apk"
          asset_name: tide-armeabi-v7a-release.apk
          asset_content_type: application/octet-stream
      - name: Upload APK (x86_64)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "/tmp/artifacts/APK (x86_64)/app-x86_64-release.apk"
          asset_name: tide-x86_64-release.apk
          asset_content_type: application/octet-stream
      - name: Upload iOS (ipa)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "/tmp/artifacts/iOS (ipa)/tide-ios.ipa"
          asset_name: tide-ios.ipa
          asset_content_type: application/octet-stream
      - name: Upload Web archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "/tmp/artifacts/Tide (web archive)/tide-web.zip"
          asset_name: tide-web.zip
          asset_content_type: application/zip
      - name: Upload MSIX (x64)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "/tmp/artifacts/MSI (x64)/tide-windows_x64.msix"
          asset_name: tide-windows_x64.msix
          asset_content_type: application/octet-stream
      - name: Upload MSIX (x86)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "/tmp/artifacts/MSI (x86)/tide-windows_x86.msix"
          asset_name: tide-windows_x86.msix
          asset_content_type: application/octet-stream
